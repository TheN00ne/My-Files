Селектор - это синтаксис, который помогает выбрать элемент из HTML и добавить к нему стили.

Селектора бывают простые и составные.

Простые селектора - это когда обращаються к одному селектору (тегу, классу, id).
Составные селектора - это когда обращаються к нескольком селекторам (Нескольком тегам, тег в теге, тег в классе...).


Простые селекторы:

Если мы хотим обратиться к тегу, то селектор должен быть как название тега.
Если мы хотим обратиться к классу, то селектор должен быть как название тега, но начииаться точки.
Если мы хотим обратиться к id, то селектор должен быть как название тега, но начинаться с решотки.

селектор * - это все элементы страницы.

color - это свойство добавляет цвет.

                           |           Пример:
Селектор	           |           body
{                          |           {
   Свойство:значение;      |              color:red;
}                          |           }
                           |

Составные селекторы:

Можно добавлять к нескольком классам (h1,h2...).
Можно добавлять к тегу в теге (div p (обращаемся к тегам p, которые находяться в тегах div)).
Можно указывать на прямых потомков (если у нас в теге div есть тег p внутри которого есть тег b, то тег b это премой потомок для тега p, но не div) (div p > b (обращаемся к тегам b, которые внутри тега p, которые внутри тега div)).
Можно указывать на следуйщий элемент относительно другого (div h + p (обращаемся к тегам p, которые стоят после тега h в теге div)).

Можно указывать на селектор через атрибут (a[target] (обращаемся к тегам a с атрибутом target)).


Составные селектора:

         		   |	       Пример:		|	Пример:
Составной селектор	   |           h1,h2...		|	div p
{                          |           {		|	{
   Свойство:значение;      |              color:red;	|	   color:blue
}                          |           }		|	}
                           |				|


/* ... */ - это коментарий в CSS.


Псевдокласс — это селектор, который выбирает элементы, находящиеся в специфическом состоянии.	

hover - это псевдокласс, который обозначает: Если навел курсор, то...
active - это псевдокласс, который обозначает: Если нажать на какой-то объект, то...
visited - это псевдокласс, который обозначает: Если нажать на какую-то ссылку, то... (и она такая не изменится даже при перезагруки сайта).
focus - это псевдокласс, который обозначает: Если на элементе весит фокус, то...

Структурва псевдокласса:                |          Пример:
                                       |          
селектор: псевдокласс  		       |          p: hover
{                                      |          {
   Свойство:значение;                  |           color: red;
}                                      |           cursor: pointer; 
                                       |          }
                                       | 



Псевдоэлемент — это ключевое слово, добавляемое к селектору, которое позволяет стилизовать определённую часть выбранного элемента.

after - это псевдоэлемент, который означает: после чего-то делать...
before - это псевдоэлемент, который означает: до чего-то делать...
first-letter - это псевдоэлемент, который устанавливает какие-то параметры первой букве.
first-line - это псевдоэлемент, который устанавливает какие-то параметры первой строке.
selection - это псевдоэлемент, который устанавливает какие-то параметры тексту при выделении мышкой.
first-child - это псевдоэлемент, который устанавливает какие-то параметры первому элементу.
last-child - это псевдоэлемент, который устанавливает какие-то параметры последниму элементу.
nth-child(even) - это псевдоэлемент, который устанавливает какие-то параметры только четным элементам.
nth-child(odd) - это псевдоэлемент, который устанавливает какие-то параметры только нечетным элементам.
nth-child(число) - это псевдоэлемент, который устанавливает какие-то параметры только тому элементу, который находиться под номером, который указан в скобках.
nth-child(числоn) - это псевдоэлемент, который устанавливает какие-то параметры каждому n-ому элементу.
not(селектор) - это псевдоэлемент, который игнорирует установку каких-то параметров селектору, указаному в скобках. 




Структурв псевдоэлемента:                 |          Пример:
                                          |        
селектор:: псевдоэлемент                  |          p:: after
{                                         |           {
   Свойство:значение;                     |            content: '(какой-то текст)'
}                                         |            color: red;  
                                          |           }



Некоторые стили могут наследоваться от родителей (color, ), но отнаследоваться могут далего не всестили.
Чтоб от родителя относледовались те свойства, которые поумолчанию не наследуються нужно у дочернего элемента указать значение свойства как inherit.


Теги бывают строчные, блочные и строчные-блочные.

display - это свойство, которое устанавливает тип тега.

margin - это свойство, которое указывает внешний отступ.
padding - это свойство, которое указывает внутрений отступ.

В свойствах margin и padding значения отступов указываються, как по часовой стрелке (1px, 2px, 3px, 4px значит то, что сверху отступ 1 пиксель, справа - 2, внизу 3, а слева - 4).
Также от свойств margin и padding пошли такие свойства: margin/padding-tom, margin/padding-right, margin/padding-bottom, margin/padding-left у них есть только одно значение.


Блочная модель

У блочного элемента display:block;

width - это свойство устанавливает ширину блочному элементу (на линейный элемент работать не будет).
height - это свойство устанавливает высоту блочному элементу (на линейный элемент работать не будет).

Блочний элемент состоит из этого: контент, padding, border, margin.

Если точнее, то свойство width/height устанавливают ширину/высоту контенту, а не всему элементу.

Чтобы свойства width/height указывали на полную ширину/высоту, надо, чтоб было свойство box-sizing со значение border-box.
свойство box-sizing со значение border-box изменяет высоту/ширину только контента так, чтоб padding + border + контент = width/height.

У свойства box-sizing поумолчанию стоит значение content-box, тоесть значение width/height это только ширина/высота контента (Тоесть если width:100px, то полная ширина элемента = width(Контент) + padding + border).

Если у элемента display:inline-block, то это элемент, у которого есть свойства и блочного и линейного элемента (У элемента будет width и height, и несколько таких элементов могут находиться в одном ряду, в отличии от блочных элементов).


Позиционирование

position - это свойство, которое устанавливает или изменяет положение какого-то элемента (без специальных значений(static, relative, absolute, fixed и sticky) работать небудет). 
static - это значение стоит поумолчанию.
relative - это значение указывает на то, что элемент будет размещен относительно своей начальной точки, но есть пустое место.
absolute - это свойство указывает на то, что элемент размещаеться относительно родительского тега и нету пустого места.
fixed - это свойство, которое указывает, что при скроле элемент не сдвиниться.
sticky - это свойство, которое смищает элемент в границах экрана.
top - это свойство указывает отступ с верху.
right - это свойство указывает отступ с права.
bottom - это свойство указывает отступ от с низу.
left - это свойство указывает отступ с лева

min-width - указывает минимальное значение ширины (При добавлении контента в элемент этот элемент будет ростягиваться или стягивоться при удалении, но стягиваться будет до минимального значения).
min-height - указывает минимальное значение высоты (При добавлении контента в элемент этот элемент будет ростягиваться или стягивоться при удалении, но стягиваться будет до минимального значения).

max-width - указывает максимальное значение ширины (При добавлении контента в элемент этот элемент будет ростягиваться или стягивоться при удалении, но ростягиваться будет до максимального значения).
max-height - указывает максимальное значение высоты (При добавлении контента в элемент этот элемент будет ростягиваться или стягивоться при удалении, но ростягиваться будет до максимального значения).

z-index - указывает слой, на котором будет находиться элемент.


overflow - это значение, которое отвечает за прокрутку имеет значения auto, scroll и hidden.
Значение auto значит то, что элемент можно скролить. 
Значение scroll значит то, что элемент можно скролить и будет две полосы прокрутки, даже если они не используються.
Значение hidden значит то, что элемент нельзя будет проскролить.


Плавающие элементы

float - это команда, которая устанавливает позицию (лево, право) какому-то элемента, и другие элементы будут его облегать с разных сторон.

Когда добавляешь элементу свойство float, то его перестают видеть другие элементы и по этому на этот элемент будут налезать другие элементы (если это блоки).


Единицы измерения

px (условная едениться измерения, тоесть если ширина/высота элемента уже указана в CSS, то она не будет изменяться, даже если ее изменять в настройках браузера)

% (1% по ширене/высоте элемента = 1% от всей ширене/высоте родительского элемента).

em - 1em = font-size (если font-size = 20px, то 1em = 20px) (При изменении font-size меняеться и em, даже если font-size измениться через настройки браузера em тое измениться, потому-что em - это относительная еденица измерения).

rem - это относительная еденица, 1rem = той ширене/высоте, которая указана в настройках браузера или в теге <html> </html>, но никак не зависит от родительского элемента (тоесть, если есть элемент с font-size:30px; и у него есть дочерний элемент с font-size:2rem;, то это будет 2 * ширину/высоту в настройках браузера, а не 2 * 30(ширину/высоту родительского элемента))

vw - относительная еденицся измерения, работает относительно всей ширины сайта (вьюпорта) (Тоесть 100vw = всей ширене экрана, 1vw = 1/100 всей ширены экрана).

vh - относительная еденицся измерения, работает относительно всей высоты сайта (вьюпорта) (Тоесть 100vh = всей высоты экрана, 1vw = 1/100 всей высоты экрана).

vmin - относительноя еденица измерения, (100vmin = всему размеру меньшей стороне - высоте/ширене (смотря что меньше)) (1vmin = 1/100 меньшего размера окна браузера (высоте/ширине)).

vmax - относительноя еденица измерения, (100vmax = всему размеру большой стороне - высоте/ширене (смотря что меньше))  (1vmax = 1/100 большего размера окна браузера (высоте/ширине)).

В CSS можно к ширене/высоте отдой еденицы додавать/отнимать... другую: calc(33.33% - 10px) - шириша/высота будет 33.33%, но без 10px.


Шрифт и текст

font-family: Название шрифта - это свойство устанавливает шрифт тексту.

font-size - это свойство устанавливаэт размер шрифта.

font-weight - это свойство устанавливает ширину текста.

font-style - эта команда устанавливает стиль текста.

text-decoration - это свойство устанавливает подчеркивание шрифта.

Text-decoration-color: ...; - это свойство устанавливает цвет подчеркиванию.

letter-spacing - это свойство устанавливает размер пробелов между символами.

word-spacing - это свойство устанавливает размер пробелв между словами.

line-height - это свойство устанавливает размер отступ между строками.

text-transform - это свойство устанавливает регистр символов.

text-align - это свойство устанавливает положение текста.

text-indend - это свойство устанавливает отступ в начале от края (абзац).


Границы и тени

border-width - устанавливает ширину границе.

border-style - устанавливает стиль границе (solid - сплошная, dashed - пунктирная, doble - двойная граница).

border-color - устанавливает цвет границе.

Три предыдущих свойства можно объеденить в одно: border:ширина стиль цвет (но порядок не важен).

border-top - граница вверху, border-right - граница сверху, border-left - граница слева, border-bottom - граница внизу.

border-radius - это свойство указывает скругление углов.
у свойства border-radius может быть максимум 4 значения: скругление каждого угла по часовой стрелке начиная с верхнего левого.
Значение можно подавать как в пикселях, как в процентак, так и в любой еденийе.
Чтоб скруглить элемент полностью нужно, чтоб значение border-radius было равно половине размерам элементам.

outline - это свойство, которое создает дополнительную границу.

text-shadow:отступ тени вправо отступ тени вниз розмытость тени цвет - это свойство додает тень тексту.

box-shadow:отступ тени вправо отступ тени вниз розмытость тени цвет - это свойство додает тень блочному элементу.

opacity - это свойство, которое устанавливает прозрачность.


Списки

list-style-type - это свойство устанавливает тип маркеров у списков.

list-style-position - это свойство устанавливает позицию списков (outside - маркеры списков находяться в зеленной зоне, inside - маркеры списков находяться в синей зоне).

list-style-image: url() - это свойство устанавливает картинку маркерам списков.


Фон

background-color - это свойство, которое устанавливает цвет фона.

background-image: url() - это свойство, которое устанавливает картинку заднего фона.

background-size - это свойство, которое устанавливает размер фоновой картинки (contain - подстраиваться под размер экрана, cover - покрывает собой весь экран, ширина px и высота px).

background-repeat - это свойство, которое устанавливает повторение картинки (no-repeat - без повторений, repeat-x - повторение только по ширине, repeat-y - повторение только по высоте) (использываеться в случаи если background-size устанавливался значениями: ширина т высота).

background-position: ширина, высота - это свойство, которое устанавливает позицию фоновой картинки (right - справа, left - слева, center - по центру, top - сверху, bottom - снизу).

background-attachment - устанавливает положение фоновой картинки на странице (fixed - неподвижно даже при скроле).

background - это свойство, которое отвечает за фоновый цвет, картинку, позицию, повторение и положение (background: red url(...) centre top no-repeat fixed (запятые можно не ставить) (необязательно устанавливать все свойства, можно только некоторые)).


Градиент

Градиенты бывают линейные или круговые.

background: linear-gradient(deg, color1, color2, color3...) - значечние linear-gradient указывает на то, что задний фон будет линейным градиентом первое значение указывает на угол наклона, второе - первый цвет, третие - второй цвет и т. д.

background: radial-gradient(circle, color1, color2, color3...) - значение radial-gradient указывает на то, что задний фон будет круговым градиентом circle - это значит то, что скругление будет крутовым, второе значение - это первый цвет, третие - второй цвет и т. д.

Также градиент можно указывать с помощью background-image, но легче будет писать background.

У цвета может быть значение transparent - это значит то, что цвет будет прозрачный.


Фильтры

filter - это свойство добавляет фильтр.

Значения свойства filter:

blur(px) - добавляет размытие.

drop-shadow(отступ тени вправо, отступ тени вниз, розмытость тени, цвет) - добавляет тень элементу.

grayscale(%) - добавляет обесцвечивание.

brightness(от 0 до 150 %) - добавляет яркость.

contrast(от 0 до 150 %) - добавляет контрастность.

saturate(%) - добавляет насыщеность.

sepia(%) - добавляет эффект старинности.

hue-rotate(deg) - устанавливает оттенок картинке, который соотвецтвует градусу на цветовом круге.


Трансформации

transform - добавляет трансформации.

Значение совйства transform.

rotate(deg) - добавляет вращение.

scale(x, y) - маштабирует элемент в x раз по горизонтали и y раз вертикали.

translate(Xpx, Ypx) - сдвигает элемент на x пикселей по горизонтали и на y - по вертикали.

skew(Xdeg Ydeg) - наклоняет элемент на x градусов по горизонтали и на y - по вертикали.

transform-origin: Xpx Ypx - определяет точку, относительно которой будут все трансформации (поумолчанию она в центре).

В свойство transform можно добавлять сразу несколько значений.


Плавные переходы


transition-duration - делает плавный переход (значение в секундах (0.5s, 2s, 5s...)).

transition-property - указывает свойство, которому будет добавлен плавный переход (transform, color, background-color) (если хотим добавить переход всем то значение будет all).

transition-delay - указывает задержку перед переходом (значение в секундах).


Анимации

@keyframes имя анимации { - создает тело анимации

form { - исходный кадр
  свойства
}

50%{ - кадр, который сработает на 50% (кадров может быть сколько угодно)
  свойства
}

to { - конечный кадр
  свойства
}

}

animation-name: имя анимации - это свойство добавляет анимацию элементу.

animation-duration: s - это свойство указывает длительность анимации.

animation-iteration-count - это свойство отвечает за количество раз запущеных анимаций (если значение - это infinite, то анимация не остановиться).

animation-play-state - это свойство отвечает за воспроизведение или остановку анимации (значение paused значит остановку анимации, а runing - воспроизводит).


Таблицы

border-spacing: x y - это свойство отвечает за отступы в таблице.

border-collapse - отвечает за грани (collapse - объеденяет грани в одну, separate - это делает две линии у границы таблицы).

caption-side - это свойство отвечает за положение заголовка (сверху или снизу).

text-align - выравнивание текста в таблице по горизонтали(left, center, right).

vertical-align - выравнивание текста в таблице по вертикали (top, middle, top).

empty-cells - это свойство отвечает за пустые ячейки (show - показывает, hide - скрывает) (Работает только тогда, когда border-collaps: separate).


Курсор

pointer-events - это свойство отвечает за взаимодействие пользователя с элементами.

cursor - это свойство отвечает за вид курсора.


Текстовые эффекты

overflow - это свойство убирает весь текст, который не поместился в границы и убирает прокрутку элемента.

text-overflow - это свойство отвечает за отображение текста, которое выходит за границы.

word-wrap - это свойство отвечает за перенос слова на следуйщую строку.

column-count - это свойство разбивает блок на колонки.

column-rule: ширина, стиль, цвет - это свойство устанавливает границу между колонками.

column-width - это свойство устанавливает минимальную доступную ширину колонок при их сжатии.

column-gap - это свойство отвечает за растояние между колонками и границами.


Медиа запросы

Медиа-запросы — это особые правила применения CSS, с помощью которых можно менять стиль элементов, отталкиваясь от устройств, на которых будут просматривать веб-страницу.

Все медиа запросы начинаються с @media
Далее нужно указть вид устройства

Главные виды устройств:
	все устройства — all
	устройства с экранами — screen;
	синтезаторы речи — speech;
	принтеры или страница предварительного просмотра для печати — print.
	проекторы — projection;
	телевизоры — tv;
	смартфоны и другие мобильные устройства — handheld.

Также медиа-запросы могут содержать в себе логические операторы, такие как:
	and — все условия должны выполняться одновременно;
	, — хотя бы одно из условия должно выполняться, аналогично «или»;
	not — отрицание условия (имеет более низкий приоритет, чем and, а значит будет выполняться после него).

Для составления условий можно использовать некоторые функции:
	width (max-width и min-width) — определяет требования к ширине браузера
	height, min-height и max-height — прописывает требования к высоте браузера
	orientation — оценивает режим отображения страницы: портретный (portrait) или альбомный (landscape)
	aspect-ratio (min-aspect-ratio, max-aspect-ratio) — отношения ширины к высоте (16/8; 1200/800...)
	И другие.

Пример:
	@media screen and (min-width: 800px) and (max-width: 1200px){
		body{
		   font-size:24px;
		   color:gray;
		}
	} - В этом примере у всей страницы размер шрифта будет 24px и цвет будет серый в том случаи, если ширина сайта от 800px до 1200px.


flexbox


flexbox - это технология для создание сложных макетов за счет правильного розмещения элементов на странице.

Флекс контейнер - это основной-родительский элемент, в котором розмещаються элементы.
У флекс контейнера должно быть свойство display:flex;

Элементы в Флекс контейнере по умолчанию розмещаються с лево на право и сверху вниз.

Основная(Главная) ось - Вдоль этой оси будут розполагаться элементы флекс контейнера.
Поперечная(Дополнительная) ось - Вдоль этой оси элементы будут выравниваться по вертикали(по умоланию).

Флекс контейнер розширяеться по ширене на весь экран, а элементы нет (будет пустое место).

Если же у флекс контейнера свойство display:inline-flex; то флекс контейнер подстроиться под ширину элементов (пустого места не будет).

flex-direction - это свойство устанавливает розположение осей.
Значения: row - главная ось направлена слева на право(по умолчанию), row-reverse - главная ось направлена справо на лево, column - главная ось направлена сверху вниз, column-reverse - главная ось направлена снизу вверх.

flex-wrap - это свойство отвечает за перенос элементов (по умолчанию элементы в флекс контейнере не переносяться на следуйщую строку).

Чтоб убрать пустое пространство в флекс контейнере нужно дать всем элементам свойстов width, если значение 50%, то вместиться 2 элемента, 33.33% - 3 элемента и т.д.

flex-flow - это свойство указывает направление главной оси и перенос элементов (это и flex-direction и flex-wrap).

gap - это свойство устанавливает отступы между эллементами.

justify-content - это свойство выравнивает элементы по направлению главной оси.

align-content - это свойство выравнивает элементы поперечная оси, но в том случаи, если у них есть свойство flex-wrap:wrap;

align-items - это свойство выравнивает элементы по направлению поперечной оси, но можно и без flex-wrap:wrap.

align-self - это свойство выравнивает элемент индивидуально по поперечной оси(это свойство для элемента, а не для контейнера).

flex-grow - это свойство розпределяет свободное пространство между элементами(элемент заполнит это свободное место собой) (это совйство для элемента) (если у элемента flex-grow:2; то элементу досталось в 2 раза больше свободного меса чем самый маленький элемент).
(размер флекс элементов подстраиваються под контент)

flex-shrink - это свойство указывает то, сколько свободного места элемент отдаст соседнему при сжатии(Не работает, если есть flex-wrap:wrap и если все элементы растягиваються на полную ширину экрана, то есть у них есть flex-basis: 100/n%, где n - это количество элементов).

flex-basis - это свойство устанавливает размер элемента вдоль главной оси (если главная ось - горизонтальная, то устанавливаеться ширина, а если вертикальная - высота) (значения можно указывать в чем угодно).

flex - это свойство, которое объеденяет в себе flex-grow, flex-shrink и flex-basis.

order - это свойство, которое устанавливает элементу его индект (у всех элементов по умолчанию индек = 0, и они розмещены на сайте так, как розмещены в HTML, но если у элемента индекс больше чем у остальныйх, то он разместиться в конце не смотря на то, что он не последний в HTML).

Флекс контейнер может находиться внутри другого флекс контейнера, тоесть флекс элементу можно прописать display:flex; и он станет флекс контейнером.

Флекс свойства для контейнера:flex-direction, flex-wrap, flex-flow, gap, justify-content, align-items, align-content.

Флекс свойство для элементов:align-self, flex-grow, flex-shrink, flex-basis, flex, order.


Grid

у Grid контейнера должно быть свойство display:grid;


grid-template-rows - это свойство устанавливает grid контейнеру количество строк (значений столько, сколько хотим рядов) (значение - это высота рядовx).

grid-template-columns - это свойство розбивает grid контейнеру на колонки (значений столько, сколько хотим колонок) (значение - это ширина колонок).

grid-template: rows / columns - это свойство, которое устанавливает grid контейнеру ряды и колонки (это свойство объеденяет в себе grid-template-rows и grid-template-columns).


Если хотим создать несколько колонок с одиноковой шириной то надо писать так: grid-template-columns:repeat(кол. колонок, ширина);
auto-fill - это значение указывает то, чтоб количество ячеек размещалось так, чтоб ячейки подстраивались под всю ширину, и если какие-то ячейки не вмещаються, то чтоб они переносились на следуйщий ряд, но сами ячейки свой размер не меняют.
auto-fit - это как auto-fill, но ячейки разширяються если есть пустое место так, чтоб занять все свободное пространство строки.
minmax(min, max) - это значение указывает на какой минимальный/максимальный размер может разтягиваться элемент.
fr(фракция) - это еденица измерения, которая указывает, какую часть от всего будет занимать элемент (если всего 4 элемента и каждому из них дано по 1fr, то каждый элемент будет занимать 1/4 от всего размера).


Явная сетка - это сетка, которой мы дали ширину/высоту в grid-template-columns/grid-template-row.
Неявная сетка - это сетка, которой мы не дали ширину/высоту в grid-template-columns/grid-template-row.


grid-auto-rows - это свойство, которое дает высоту неявным рядам (тем, которые мы не указали в grid-template-rows).

grid-auto-columns - это свойство, которое дает ширину неявным колонкам (тем, которые мы не указали в grid-template-columns).


grid-row-gap - это свойстов создает отступы между рядами.

grid-column-gap - это свойстов создает отступы между колонками.

grid-gap:row column - это свойство указывает отступы между ячейками(это grid-column-gap и grid-row-gap в одном свойстве).


grid-row-start - это свойство указывает линию(та, которая между элементами и между началом/концом), на которой будет начинаться элемент по вертикали.

grid-row-end - это свойство указывает линию(та, которая между элементами и между началом/концом), на которой будет заканчиваться элемента по вертикали.

grid-column-start - это свойство указывает линию(та, которая между элементами и между началом/концом), на которой будет начинаться элемент по горизонтали.

grid-column-end - это свойство указывает линию(та, которая между элементами и между началом/концом), на которой будет заканчиваться элемента по горизонтали.


grid-row: начало / конец - это свойство указывает линии, на которые элемент будет начинаться и заканчиваться по вертикали (это grid-row-start и grid-row-end в одном).

grid-column: начало / конец - это свойство указывает линии, на которые элемент будет начинаться и заканчиваться по горизонтали (это grid-column-start и grid-column-end в одном).


grid-area: row начало / column начало / row конец / column конец - это свойство объеденяет grid-column и grid-row.


justify-contant - это свойство выравнивает grid контейнер по горизонтали относительно доступной облости.

align-contant - это свойство выравнивает grid контейнер по вертикали относительно доступной облости.

justify-items - это свойство выравнивает все элементы по горизонтали относительно колонки, в которрой они находяться (применяеться к grid классу).

align-items - это свойство выравнивает все элементы по вертикали относительно колонки, в которрой они находяться (применяеться к grid классу).

justify-self - это свойство выравнивает элемент по горизонтали и елемент подстраиваеться под контент (применяеться к элементу).

align-self - это свойство выравнивает элемент по вертикали и елемент подстраиваеться под контент (применяеться к элементу).


grid-template-areas - это свойство создает области сетки (дает названия рядам).

grid-area - это свойство указывает ряд, на котором будет размещен элемент.


grid-auto-flow - это свойсто отвечает за алгоритм розмещения элементов (как строка или как колонка).


order - это свойство устанавливает индекс элементу его индекс.


Теги для grid контейнера:grid-template-rows,grid-template-columns, grid-template, grid-auto-rows, grid-auto-column, grid-row-gap, grid-column-gap, grid-gap, justify-contant, align-contant, justify-items, align-items, grid-template-areas, grid-auto-flow.

Теги для grid элементов:grid-row-start, grid-row-end, grid-column-start, grid-column-end, grid-row, grid-column, justify-self, align-self, grid-area, order.
SASS(Syntactically Awesome Stylesheets - Синтаксически Потрясающие Таблицы Стилей) - это CSS препроцессор, который облегчает и ускоряет написание CSS
SCSS(Sassy Cascading Style Sheets - Дерзкие Каскадные Таблицы Стилей) - это тоже это CSS препроцессор, который облегчает и ускоряет написание CSS, но более новый и более похож на стандартный CSS

SASS и SCSS - это почти одно и тоже:
Сначала был только препроцессор SASS, но потом появился SCSS. Синтаксис SCSS более похож на синтаксис CSS, поэтому к нему легче привыкнуть 

Но браузер не понимает содержание SCSS и SASS, поэтому компьютер сначала переводит их в обычный CSS а уже потом читает

SCSS и SASS можно перевести в CSS двумя способами: с помощтю консоли и с помощью сборщика(Webpack,Prepros...)


Компилирывание SCSS в CSS:


С помощью консоли:

1) Установить node js (установлен)
2) Написать в терменале редактора npm i -g sass
3) Жмем сверху в VS code на "Терминал" а потом на "Настройка задач" 
4) Жмем на Create tasks.js file from template
5) Выбираем пункт Others

Все это создаст в папке проекта файл tasks.json

Этот файл нужно изменить {
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Compile SCSS to CSS", - это метка для других разработчиков
            "type": "shell", -  это указывает, что тип задачи - это выполнение командной строки.
            "command": "sass.cmd", - это команда, которую выполнит ваша задача. В данном случае, это команда Sass для компиляции SCSS в CSS.
            "args": ["style.scss", "style.css"], - Это массив аргументов, передаваемых команде sass.cmd. Он включает имена ваших входного файла SCSS (в данном примере - style.scss) и выходного файла CSS (в данном примере - style.css)
            "group": "build" - это указывает, что ваша задача относится к группе "build"
        }
    ]
}

Дальше в главную папку проекта создадим файл "style.scss", то есть, такой же файл, который указанный в args

Дальше нажимаем сверху в VS code на "Терминал" а потом на "Запустить задачу сборки"

После всего этого в папке проекта создадиться CSS файл (в нашем случаи style.css), в которую будет автоматически переводиться весь SCSS.

Когда мы что-то пишим в проекте style.scss, это все нужно будет перевести в style.css, чтоб это сделать, нужно будет снова нажимать сверху в VS code на "Терминал" а потом на "Запустить задачу сборки"

Чтоб редактор автоматически переводил из SCSS в CSS нужно пользываться сборщиком.


С помощью сборщика:

Я пока-что буду пользываться Prepros, но есть и другие более мощные и сложные сборщики такие как WebPack

Для Prepros:

1) Скачиваем Prepros (Скачан)
2)Создаем где-то в проекте файл с расширением scss
3)Перетаскиваем наш основной проект в программу Prepros

Все! Дальше программа Prepors будет автоматически переводить мой scss в css (После первого сохранения кода в файле scss/sass Prepros сам создает файлы с расширением css для каждого моего scss/sass файла с таким же именем)

Только при написании scss/sass кода не нужно закрывать Prepros, потому-что scss не будет переводиться В css

Нужно подключать к файлу html файл css, а не scss потому-что браузер не понимает scss



SCSS:

Синтаксис SCSS не чем не отличаеться от синтаксис CSS:
Стили селектора пишуться в фигурных скобках, и после каждого стиля нужно писать точку с запятой.
В этом и есть основное отличие SCSS от SASS:
В SASS мы пишем стили внутри селекторов с помощью отступов(Tab), а не фигурных скобок
И после стилей мы не пишем точку с запятой, как в SCSS или CSS



Вложенность:

Вложеность - это возможность писать внутри одних селекторов другие:

.block{
  background:blue;
   font-size:20px;
  h1{
    font-size:30px;
    text-aling:center;
  }
}

Тут мы внутри селектора .block записали селектор h1, то есть у всех h1, которые будут внутри .block будут с text-aling:center


В CSS это будет так(
 .block{
   background:blue;
   font-size:20px;
 }

 .block h1{
   font-size:30px;
   text-aling:center;
 }
)

У стилей дочерних элементов больший приоритет чем у родительских

То есть у дочернего элемента h1 стиль text-align будет 30px, а не 20px, как у родителя .block



Комментарии:

Чтоб сделать такой комментарий, который будет виден и в scss и в css, нужно написать так: /*комментарий*/

Чтоб сделать такой комментарий, который будет виден в scss, но не будет и в css, нужно написать так: //комментарий



Операторы:

> - это оператор, который обращаеться только к прямым потомкам (дочерним элементам первой вложености)

Допустим, что в классах block и child-block есть теги p и мы хотим обратиться только к тегам класса block:

.block{
    background:blue;
    font-size:20px;
    >p{ - только прямые потомки класса .block
     color:orange;
    }
    child-block{
      font-size:30px;
      text-aling:center;
    }
}


& - это оператор, который заменяет собой тот селектор, в котором он написан

Мы можем писать в классе стиля псевдоклассов/псевдоэлментов или просто селектор, в котором название похоже на та, которое у высшого селектора

.block{
  background:blue;
  font-size:20px;
  &:hover{ - тоже самое, что и block:hover
    font-size:30px;
    color:red;
  }
}
или даже можем сделать так:

.block{
  background:blue;
   font-size:20px;
}

h1{
  font-size:30px;
  text-aling:center;
  .block &{ - обращаемся к тем h1, которые находяться внутри класса block
    font-size:50px;
  }
}



Переменные:

Чтоб создать переменную, нужно написать так: $имя:значение;
Значени переменной может быть любым (цветом, пикселями или любым другим значением)

Чтоб использывать переменные нужно написать вместо значения так: $имя;

Пример:

$place:center; - создаем переменную place со значением center
$color:red; - создаем переменную color со значением red

body{
    h1{
        text-align:$place; - используем переменную $place
        color:$color; - используем переменную $color
    }
    li{
        color:$color; - используем переменную $color
    }
}



Математика:

В scss можно использовать математические действия:

В SCSS(  
.block{
  width:(200px / 4) + 10px;
}
)

В CSS(
.block{
  width:60px;
}
)

Если мы будем делать математические действия над переменные, то переменные нужно записывать так: #{переменная}: $newSize:#{$size * 5}px;



Шаблоны:

Если у нас часто повторяються одни и теже стили с одинаковыми значениями, то можно не писать их каждый раз для каждого селектора, а использовать шаблоны
Чтоб создать шаблон нужно написать так: %имя{стили}
Чтоб в каком-то селекторе использовать шаблон нужно внутри этого селектора написать так: @extend%имя шаблона;

%style{ - создание шаблона
  color:red;
  background-color:black;
  font-size:25px;
}

body{
    h1{
        text-align:center;
        @extend %style; - использывание шаблона
    }
    li{
        @extend %style; - использывание шаблона
    }
}

Также для создания шаблона вместо % можно ставить . то есть мы будем использовать класс как шаблон, но	если пишем чере %, то самого по себе этого стиля в css файле не будет, а если через . то это класс-шаблон будет в css файле
Если пишем через класс, то подключать нужно так: @extend .имя;



Миксины:

Миксин - как и шаблон, позволяет создать стиль, который можно будет повторно использовать во многих селекторах, но отличие от шаблонов в том, что в миксинах можно использовать параметры(переменные), как в функции

Создание миксина: @mixin имя(переменные){стили}
Переменным в миксинах можно поставить значение по умолчанию, поставив после имени файла твоиточие, а потом амо значение: @mixin имя(переменные:значение){стили}

Чтоб подключить миксин к селектору, нужно написать так: @include имя(значения переменных);

@mixin style($color, $size){
  color:$color;
  font-size:$size;
}

block{
  @include style(green, 25px);  
}

block-2{
  @include style(red, 12px);  
}



Функции:

Чтоб создать функцию нужно написать так:
@function имя(переменные){
  @return (результат)
}

Чтоб использовать функцию нужно написать так: имя(переменные)

Пример:

@function func($size:1){ - создание функции
  $newSize:#{$size * 5}px;
  @return $newSize;
}

.block{
  font-size:func(5); - использование функции
}



Циклы:

@for $i form число1 to число2{ - тут цикл увеличивает переменную $i от число1 до число2
  .block-#{$i} { - создаем селекторы .block-i
    order:#{$i}; - даем каждому блоку стиль order со значением i
    color:red; - даем каждому блоку красный цвет
  }
}


Пример

.block{ - родительский класс .block
  @for $i from 1 to 10{ - цикл переберает числа от 1 до 10
    &-#{$i}{ - создает на каждую итерацию дочерний селектор .block-текущий_i
      color:red; - дает каждому дочернему селектору красный цвет
      order:#{$i}; - дает каждому дочернему селектору order со значением текущего i
    }
  }
}



Условия:

.block{
  @if $color == blue { - проверяем: переменая $color - это синий?
    background-color: blue; - если да, то у класса .block,  background-color: blue;
  } 
  @else { - иначе
    background-color: red; - у класса .block,  background-color: red;
  }
}



Импорт:

Чтоб импортировать в наш scss/sass файл какой-то другой scss/sass файл, нужно сделать так:

@import "путь к файлу" - импортирует весь scss/sass в наш scss/sass файл из файла, путь к которому мы указали 